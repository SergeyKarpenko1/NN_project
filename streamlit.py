import json

from PIL import Image
import torch
import torch.nn as nn
import torchvision.models as models
from torchvision.transforms import ToTensor
import streamlit as st

import ssl
import urllib.request

# –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
ssl._create_default_https_context = ssl._create_unverified_context

# Load models
model_resnet18 = models.resnet18()
model_resnet18.fc = nn.Linear(512, 1)
model_resnet18.load_state_dict(torch.load(
    '/Users/sergey/ds_bootcamp/ds-phase-2/08-nn/nn_project/resnet18_weights.pth'))
model_resnet18.eval()

model_inceptionV3 = models.inception_v3(pretrained=True)
model_inceptionV3.eval()

model_resnet50 = models.resnet50()
# –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å [1000, 2048] –¥–ª—è fc
model_resnet50.fc = nn.Linear(2048, 1000)
# –ó–∞–≥—Ä—É–∑–∫–∞ –≤–µ—Å–æ–≤ –º–æ–¥–µ–ª–∏
model_resnet50.load_state_dict(torch.load(
    '/Users/sergey/ds_bootcamp/ds-phase-2/08-nn/nn_project/weight_model-2.pth'))
# –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Å–ª–æ—è
model_resnet50.fc = nn.Linear(2048, 1)
# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–∂–∏–º–∞ –æ—Ü–µ–Ω–∫–∏ (evaluation mode)
model_resnet50.eval()

# Load class labels for the inception model
labels = json.load(open('/Users/sergey/Downloads/imagenet_class_index.json'))


def decode(class_idx):
    return labels[str(class_idx)][1]


def process_image_inception(image):
    image = image.resize((224, 224))
    image = ToTensor()(image).unsqueeze(0)
    with torch.no_grad():
        outputs = model_inceptionV3(image)
        predicted_class = torch.argmax(outputs)
    return predicted_class.item()


def main_page():
    st.sidebar.markdown(
        "# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ª—é–±–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Å –ø–æ–º–æ—â—å—é inceptionV3_imgnet üñº")

    st.title("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Å—é–¥–∞ –ª—é–±—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É")
    uploaded_file1 = st.file_uploader(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", type=["jpg", "jpeg", "png"])

    if uploaded_file1 is not None:
        image = Image.open(uploaded_file1)
        st.image(image, caption='–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ',
                 use_column_width=True)

        predicted_class = process_image_inception(image)
        class_name = decode(predicted_class)
        st.write(f"–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å: {class_name}")


def process_image_resnet(image):
    image = image.resize((224, 224))
    image = ToTensor()(image).unsqueeze(0)
    with torch.no_grad():
        outputs = model_resnet18(image)
        predicted_prob = torch.sigmoid(outputs)
    return predicted_prob.item()


def page2():
    st.sidebar.markdown(
        "# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫—Ç–æ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ –∫–æ—Ç–∏–∫ –∏–ª–∏ –ø–µ—Å–∏–∫ —Å –ø–æ–º–æ—â—å—é NN **resnet18**")

    st.title("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Å—é–¥–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ—Ç–∏–∫–∞ –∏–ª–∏ –ø–µ—Å–∏–∫–∞")
    uploaded_file = st.file_uploader(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", type=["jpg", "jpeg", "png"])

    if uploaded_file is not None:
        image = Image.open(uploaded_file)
        st.image(image, caption='–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ',
                 use_column_width=True)

        predicted_prob = process_image_resnet(image)

        if predicted_prob >= 0.5:
            st.write("–≠—Ç–æ –ø–µ—Å–∏–∫", predicted_prob)
        else:
            st.write("–≠—Ç–æ –∫–æ—Ç–∏–∫", 100 - predicted_prob)


def process_image_resnet50(image):
    image = image.resize((224, 224))
    image = ToTensor()(image).unsqueeze(0)
    with torch.no_grad():
        outputs = model_resnet50(image)
        predicted_prob = torch.sigmoid(outputs)
    return predicted_prob.item()


def page3():
    st.sidebar.markdown(
        "# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–∏–¥–∞ —Ä–æ–¥–∏–Ω–æ–∫ (–¥–æ–±—Ä–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ/–∑–ª–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ) c –ø–æ–º–æ—â—å—é NN **resnet50**")
    # st.markdown("# resnet50 üò±")

    st.title("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Å—é–¥–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–æ–¥–∏–Ω–∫–∏")
    uploaded_file = st.file_uploader(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", type=["jpg", "jpeg", "png"])

    if uploaded_file is not None:
        image = Image.open(uploaded_file)
        st.image(image, caption='–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ',
                 use_column_width=True)

        predicted_prob = process_image_resnet50(image)

        if predicted_prob >= 0.5:
            st.write("–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å, —á—Ç–æ —ç—Ç–∞ —Ä–æ–¥–∏–Ω–∫–∞ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –∑–ª–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–º",
                     predicted_prob)
        else:
            st.write("–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å , —á—Ç–æ —ç—Ç–∞ —Ä–æ–¥–∏–Ω–∫–∞ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –¥–æ–±—Ä–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–º",
                     100 - predicted_prob)


# Mapping of page names to corresponding functions
page_names_to_funcs = {
    "NN –¥–ª—è –ª—é–±–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏": main_page,
    "NN –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ—Ç–∏–∫ –∏–ª–∏ –ø–µ—Å–∏–∫": page2,
    "NN –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–∏–¥–∞ —Ä–æ–¥–∏–Ω–∫–∏": page3,
}

selected_page = st.sidebar.selectbox(
    "# –í—ã–±–∏—Ä–∏—Ç–µ NN —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –≤–∞—à–∏–º –∑–∞–ø—Ä–æ—Å–∞–º ", page_names_to_funcs.keys())
page_names_to_funcs[selected_page]()
